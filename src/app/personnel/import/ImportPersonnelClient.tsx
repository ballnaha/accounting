'use client';

import { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Stepper,
  Step,
  StepLabel,
  Chip,
  IconButton,
  Tooltip,
} from '@mui/material';
import {
  Upload,
  FileSpreadsheet,
  CheckCircle,
  XCircle,
  Download,
  ArrowLeft,
  Trash2,
} from 'lucide-react';
import * as XLSX from 'xlsx';
import { useRouter } from 'next/navigation';

interface ImportPersonnel {
  ‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™?: string;
  ‡∏¢‡∏®?: string;
  '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'?: string; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  POSCODE?: string;
  ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á?: string;
  ‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á?: string;
  ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà?: string;
  ‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢?: string;
  ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠?: string;
  ‡∏ö‡∏£‡∏£‡∏à‡∏∏?: string;
  ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î?: string;
  ‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥?: string;
  ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô?: string;
  ‡∏´‡∏ô‡πà‡∏ß‡∏¢?: string;
  ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì?: string;
  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ?: string;
  ‡∏≠‡∏≤‡∏¢‡∏∏?: string;
  '‡∏ï‡∏ó.'?: string;
  '‡∏ô‡∏£‡∏ï.'?: string;
  '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'?: string;
  _error?: string;
  _status?: 'valid' | 'invalid';
}

const steps = ['‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'];

export default function ImportPersonnelClient() {
  const router = useRouter();
  const [activeStep, setActiveStep] = useState(0);
  const [file, setFile] = useState<File | null>(null);
  const [data, setData] = useState<ImportPersonnel[]>([]);
  const [loading, setLoading] = useState(false);
  const [importing, setImporting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [importResult, setImportResult] = useState<{
    success: number;
    failed: number;
    errors: string[];
  } | null>(null);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0];
    if (selectedFile) {
      setFile(selectedFile);
      setError('');
      setSuccess('');
    }
  };

  const parseDate = (dateStr?: string): string | undefined => {
    if (!dateStr) return undefined;
    
    try {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç Excel serial date
      if (typeof dateStr === 'number') {
        const date = XLSX.SSF.parse_date_code(dateStr);
        let year = date.y;
        // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (year > 2400) year -= 543;
        return `${year}-${date.m.toString().padStart(2, '0')}-${date.d.toString().padStart(2, '0')}`;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
      const str = dateStr.toString().trim();
      
      // Format: dd/mm/yyyy
      const parts = str.split('/');
      if (parts.length === 3) {
        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]);
        let year = parseInt(parts[2]);
        
        // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
        if (year > 2400) year -= 543;
        
        return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
      }
      
      return str;
    } catch (e) {
      return undefined;
    }
  };

  const validateRow = (row: ImportPersonnel): string | null => {
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢
    if (!row.‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á && !row.‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á && !row.POSCODE) {
      return '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, ‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏´‡∏£‡∏∑‡∏≠ POSCODE)';
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (row.‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô && row.‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô.trim() !== '') {
      const cleanId = row.‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô.replace(/\s|-/g, '');
      if (cleanId.length !== 13) {
        return '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 13 ‡∏´‡∏•‡∏±‡∏Å';
      }
    }
    
    return null;
  };

  const handleUpload = async () => {
    if (!file) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json<ImportPersonnel>(worksheet);

      // Debug: ‡∏î‡∏π‡∏ä‡∏∑‡πà‡∏≠ columns ‡πÅ‡∏•‡∏∞ sample data
      if (jsonData.length > 0) {
        console.log('üìã Excel Columns:', Object.keys(jsonData[0]));
        console.log('üìÑ First Row Sample:', jsonData[0]);
      }

      // Validate ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° status
      const validatedData = jsonData.map((row) => {
        const error = validateRow(row);
        return {
          ...row,
          _error: error || undefined,
          _status: error ? 'invalid' : 'valid',
        } as ImportPersonnel;
      });

      setData(validatedData);
      setActiveStep(1);
      
      const validCount = validatedData.filter(r => r._status === 'valid').length;
      const invalidCount = validatedData.filter(r => r._status === 'invalid').length;
      
      setSuccess(`‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${validCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ${invalidCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î`);
    } catch (err) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleImport = async () => {
    const validData = data.filter(row => row._status === 'valid');
    
    if (validData.length === 0) {
      setError('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤');
      return;
    }

    setImporting(true);
    setError('');

    const results = {
      success: 0,
      failed: 0,
      errors: [] as string[],
    };

    for (const row of validData) {
      try {
        const personnelData = {
          seniority: row.‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™ ? parseInt(String(row.‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™)) : undefined,
          rank: row.‡∏¢‡∏® ? String(row.‡∏¢‡∏®).trim() : undefined,
          fullName: row['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] ? String(row['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•']).trim() : undefined,
          posCodeId: row.POSCODE ? parseInt(String(row.POSCODE)) : undefined,
          position: row.‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ? String(row.‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á).trim() : undefined,
          positionNumber: row.‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ? String(row.‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á).trim() : undefined,
          actingAs: row.‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ? String(row.‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà).trim() : undefined,
          lastAppointment: parseDate(row.‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢),
          currentRankSince: parseDate(row.‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠),
          enrollmentDate: parseDate(row.‡∏ö‡∏£‡∏£‡∏à‡∏∏),
          birthDate: parseDate(row.‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î),
          education: row.‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥ ? String(row.‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥).trim() : undefined,
          nationalId: row.‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ? String(row.‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô).replace(/\s|-/g, '') : undefined,
          unit: row.‡∏´‡∏ô‡πà‡∏ß‡∏¢ ? String(row.‡∏´‡∏ô‡πà‡∏ß‡∏¢).trim() : undefined,
          retirementDate: parseDate(row.‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì),
          yearsOfService: row.‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ ? parseInt(String(row.‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ)) : undefined,
          age: row.‡∏≠‡∏≤‡∏¢‡∏∏ ? parseInt(String(row.‡∏≠‡∏≤‡∏¢‡∏∏)) : undefined,
          trainingLocation: row['‡∏ï‡∏ó.'] ? String(row['‡∏ï‡∏ó.']).trim() : undefined,
          trainingCourse: row['‡∏ô‡∏£‡∏ï.'] ? String(row['‡∏ô‡∏£‡∏ï.']).trim() : undefined,
          notes: row['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'] ? String(row['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç']).trim() : undefined,
        };

        console.log('üîç Excel Row:', row);
        console.log('üì§ Sending personnelData:', personnelData);
        console.log('fullName value:', row['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'], '‚Üí', personnelData.fullName);

        const response = await fetch('/api/personnel', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(personnelData),
        });

        if (response.ok) {
          results.success++;
        } else {
          results.failed++;
          const errorData = await response.json();
          const errorMsg = errorData.error || 'Unknown error';
          const rowId = row['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] || row.‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á || 'Unknown';
          results.errors.push(`${rowId}: ${errorMsg}`);
          console.error('Import failed for row:', row, 'Error:', errorData);
        }
      } catch (err) {
        results.failed++;
        const rowId = row['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] || row.‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á || 'Unknown';
        results.errors.push(`${rowId}: ${String(err)}`);
        console.error('Import exception for row:', row, 'Error:', err);
      }
    }

    setImportResult(results);
    setImporting(false);
    setActiveStep(2);
  };

  const handleDownloadTemplate = () => {
    const template = [
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏î‡∏≥‡∏£‡∏á
      {
        '‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™': '1',
        '‡∏¢‡∏®': '‡∏û.‡∏ï.‡∏≠.',
        '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•': '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        'POSCODE': '8',
        '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏≤‡∏£',
        '‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '001/2560',
        '‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà': '‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á',
        '‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢': '01/10/2565',
        '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠': '01/04/2563',
        '‡∏ö‡∏£‡∏£‡∏à‡∏∏': '15/05/2540',
        '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î': '20/03/2520',
        '‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥': '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ',
        '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô': '1234567890123',
        '‡∏´‡∏ô‡πà‡∏ß‡∏¢': '‡∏Å‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á 1',
        '‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì': '20/03/2580',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ': '23',
        '‡∏≠‡∏≤‡∏¢‡∏∏': '55',
        '‡∏ï‡∏ó.': '',
        '‡∏ô‡∏£‡∏ï.': '56',
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç': '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏î‡∏≥‡∏£‡∏á',
      },
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô)
      {
        '‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™': '',
        '‡∏¢‡∏®': '',
        '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•': '',
        'POSCODE': '7',
        '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏≤‡∏£',
        '‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '002/2560',
        '‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà': '',
        '‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢': '',
        '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠': '',
        '‡∏ö‡∏£‡∏£‡∏à‡∏∏': '',
        '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î': '',
        '‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥': '',
        '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô': '',
        '‡∏´‡∏ô‡πà‡∏ß‡∏¢': '‡∏Å‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á 1',
        '‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì': '',
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ': '',
        '‡∏≠‡∏≤‡∏¢‡∏∏': '',
        '‡∏ï‡∏ó.': '',
        '‡∏ô‡∏£‡∏ï.': '',
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç': '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á',
      },
    ];

    const ws = XLSX.utils.json_to_sheet(template);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Template');
    XLSX.writeFile(wb, 'template_personnel.xlsx');
  };

  const handleRemoveRow = (index: number) => {
    setData(data.filter((_, i) => i !== index));
  };

  const handleReset = () => {
    setActiveStep(0);
    setFile(null);
    setData([]);
    setError('');
    setSuccess('');
    setImportResult(null);
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ mb: 4, display: 'flex', alignItems: 'center', gap: 2 }}>
        <IconButton onClick={() => router.push('/personnel')}>
          <ArrowLeft size={24} />
        </IconButton>
        <Box>
          <Typography variant="h4" sx={{ fontWeight: 700, color: '#1e293b' }}>
            ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£
          </Typography>
          <Typography variant="body2" sx={{ color: '#64748b' }}>
            ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
          </Typography>
        </Box>
      </Box>

      {/* Stepper */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Stepper activeStep={activeStep}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
      </Paper>

      {/* Alerts */}
      {success && (
        <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>
          {success}
        </Alert>
      )}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {/* Step 0: Upload File */}
      {activeStep === 0 && (
        <Paper sx={{ p: 4 }}>
          <Box sx={{ textAlign: 'center', maxWidth: 600, mx: 'auto' }}>
            <FileSpreadsheet size={64} color="#3b82f6" style={{ marginBottom: 16 }} />
            <Typography variant="h6" sx={{ mb: 2 }}>
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .xlsx, .xls
            </Typography>

            <Box sx={{ mb: 3 }}>
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={handleFileSelect}
                style={{ display: 'none' }}
                id="file-input"
              />
              <label htmlFor="file-input">
                <Button
                  variant="outlined"
                  component="span"
                  startIcon={<Upload size={18} />}
                  sx={{ mr: 2 }}
                >
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                </Button>
              </label>
              <Button
                variant="text"
                startIcon={<Download size={18} />}
                onClick={handleDownloadTemplate}
              >
                ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Template
              </Button>
            </Box>

            {file && (
              <Box sx={{ mb: 3 }}>
                <Chip
                  icon={<FileSpreadsheet size={16} />}
                  label={file.name}
                  color="primary"
                  variant="outlined"
                />
              </Box>
            )}

            <Button
              variant="contained"
              size="large"
              onClick={handleUpload}
              disabled={!file || loading}
              startIcon={loading ? <CircularProgress size={20} /> : <Upload size={20} />}
            >
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå...' : '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'}
            </Button>

            {/* Instructions */}
            <Box sx={{ mt: 4, textAlign: 'left' }}>
              <Typography variant="subtitle2" sx={{ mb: 2, fontWeight: 600 }}>
                ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
              </Typography>
              <Box component="ul" sx={{ pl: 2 }}>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  ‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Template
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  <strong>‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ:</strong> ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, ‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏´‡∏£‡∏∑‡∏≠ POSCODE (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡πà‡∏≤)
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  <strong>POSCODE:</strong> ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç 1-12 ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô 8=‡∏ú‡∏Å‡∏Å., 7=‡∏£‡∏≠‡∏á ‡∏ú‡∏Å‡∏Å.)
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  <strong>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á:</strong> ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å ‡∏ä‡∏∑‡πà‡∏≠, ‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  <strong>‡∏¢‡∏®:</strong> ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏¢‡∏®" ‡πÄ‡∏ä‡πà‡∏ô ‡∏û.‡∏ï.‡∏≠., ‡∏û.‡∏ï.‡∏ó.
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  <strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</strong> ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ"
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy (‡πÄ‡∏ä‡πà‡∏ô 01/01/2565)
                </Typography>
                <Typography component="li" variant="body2" sx={{ mb: 1 }}>
                  ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 13 ‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ - ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ)
                </Typography>
                <Typography component="li" variant="body2">
                  ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                </Typography>
              </Box>
            </Box>
          </Box>
        </Paper>
      )}

      {/* Step 1: Review Data */}
      {activeStep === 1 && (
        <Paper>
          <Box sx={{ p: 3, borderBottom: '1px solid #e5e7eb' }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Box>
                <Typography variant="h6">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Typography>
                <Typography variant="body2" color="text.secondary">
                  ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (
                  <span style={{ color: '#10b981' }}>
                    {data.filter(r => r._status === 'valid').length} ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                  </span>
                  , 
                  <span style={{ color: '#ef4444' }}>
                    {data.filter(r => r._status === 'invalid').length} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                  </span>
                  )
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', gap: 2 }}>
                <Button variant="outlined" onClick={handleReset}>
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
                <Button
                  variant="contained"
                  onClick={handleImport}
                  disabled={data.filter(r => r._status === 'valid').length === 0 || importing}
                  startIcon={importing ? <CircularProgress size={20} /> : <CheckCircle size={20} />}
                >
                  {importing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤...' : '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                </Button>
              </Box>
            </Box>
          </Box>

          <TableContainer sx={{ maxHeight: 600 }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
                  <TableCell>‡∏¢‡∏®</TableCell>
                  <TableCell>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•</TableCell>
                  
                  <TableCell>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</TableCell>
                  <TableCell>‡∏´‡∏ô‡πà‡∏ß‡∏¢</TableCell>
                  <TableCell>‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</TableCell>
                  <TableCell align="center">‡∏•‡∏ö</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {data.map((row, index) => (
                  <TableRow key={index} sx={{ bgcolor: row._status === 'invalid' ? '#fef2f2' : 'transparent' }}>
                    <TableCell>
                      {row._status === 'valid' ? (
                        <CheckCircle size={20} color="#10b981" />
                      ) : (
                        <XCircle size={20} color="#ef4444" />
                      )}
                    </TableCell>
                    <TableCell>{row.‡∏¢‡∏® || '-'}</TableCell>
                    <TableCell>{row['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] || '-'}</TableCell>
                    <TableCell>{row.‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á || '-'}</TableCell>
                    <TableCell>{row.‡∏´‡∏ô‡πà‡∏ß‡∏¢ || '-'}</TableCell>
                    <TableCell>
                      {row._error && (
                        <Typography variant="caption" color="error">
                          {row._error}
                        </Typography>
                      )}
                    </TableCell>
                    <TableCell align="center">
                      <Tooltip title="‡∏•‡∏ö">
                        <IconButton size="small" onClick={() => handleRemoveRow(index)}>
                          <Trash2 size={16} />
                        </IconButton>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>
      )}

      {/* Step 2: Import Result */}
      {activeStep === 2 && importResult && (
        <Paper sx={{ p: 4 }}>
          <Box sx={{ textAlign: 'center', maxWidth: 600, mx: 'auto' }}>
            <CheckCircle size={64} color="#10b981" style={{ marginBottom: 16 }} />
            <Typography variant="h5" sx={{ mb: 2, fontWeight: 600 }}>
              ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            </Typography>

            <Box sx={{ mb: 3 }}>
              <Box sx={{ display: 'flex', justifyContent: 'center', gap: 4, mb: 2 }}>
                <Box>
                  <Typography variant="h3" color="success.main">
                    {importResult.success}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                  </Typography>
                </Box>
                {importResult.failed > 0 && (
                  <Box>
                    <Typography variant="h3" color="error.main">
                      {importResult.failed}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                    </Typography>
                  </Box>
                )}
              </Box>
            </Box>

            {importResult.errors.length > 0 && (
              <Box sx={{ mb: 3, textAlign: 'left' }}>
                <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 600 }}>
                  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:
                </Typography>
                <Box sx={{ maxHeight: 200, overflow: 'auto', p: 2, bgcolor: '#fef2f2', borderRadius: 1 }}>
                  {importResult.errors.map((err, idx) => (
                    <Typography key={idx} variant="caption" color="error" sx={{ display: 'block', mb: 0.5 }}>
                      ‚Ä¢ {err}
                    </Typography>
                  ))}
                </Box>
              </Box>
            )}

            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
              <Button variant="outlined" onClick={handleReset}>
                ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
              </Button>
              <Button variant="contained" onClick={() => router.push('/personnel')}>
                ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </Button>
            </Box>
          </Box>
        </Paper>
      )}
    </Box>
  );
}
