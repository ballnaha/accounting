import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const personnel = await (prisma.policePersonnel as any).findMany({
      include: {
        posCodeMaster: true, // Include ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PosCodeMaster
      },
      orderBy: [
        { seniority: 'asc' },
        { createdAt: 'desc' }
      ]
    });

    return NextResponse.json(personnel);
  } catch (error) {
    console.error('Error fetching personnel:', error);
    return NextResponse.json(
      { error: 'Failed to fetch personnel' },
      { status: 500 }
    );
  }
}

// POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin ‡πÅ‡∏•‡∏∞ hr ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    const userRole = (session.user as any)?.role;
    if (userRole !== 'admin' && userRole !== 'hr') {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const data = await request.json();
    
    console.log('üì• Received personnel data:', JSON.stringify(data, null, 2));

    // Validate required fields - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢
    // ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏≠‡∏≤‡∏à‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á
    if (!data.position && !data.positionNumber && !data.posCodeId) {
      return NextResponse.json(
        { error: 'Position information is required (position, positionNumber, or posCodeId)' },
        { status: 400 }
      );
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á)
    if (data.nationalId) {
      const existing = await prisma.policePersonnel.findFirst({
        where: { nationalId: data.nationalId }
      });

      if (existing) {
        return NextResponse.json(
          { error: 'National ID already exists' },
          { status: 400 }
        );
      }
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const processedData = {
      ...data,
      // ‡πÅ‡∏õ‡∏•‡∏á string/number ‡πÄ‡∏õ‡πá‡∏ô Int ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö posCodeId
      posCodeId: data.posCodeId ? parseInt(String(data.posCodeId)) : null,
      
      // ‡πÅ‡∏õ‡∏•‡∏á number ‡πÄ‡∏õ‡πá‡∏ô string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô String
      fullName: data.fullName ? String(data.fullName).trim() : null,
      positionNumber: data.positionNumber ? String(data.positionNumber) : null,
      nationalId: data.nationalId ? String(data.nationalId) : null,
      
      // ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô Int
      seniority: data.seniority ? parseInt(String(data.seniority)) : null,
      yearsOfService: data.yearsOfService ? parseInt(String(data.yearsOfService)) : null,
      age: data.age ? parseInt(String(data.age)) : null,
      trainingCourse: data.trainingCourse ? String(data.trainingCourse) : null,
      
      // ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô Date ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      lastAppointment: data.lastAppointment ? new Date(data.lastAppointment) : null,
      currentRankSince: data.currentRankSince ? new Date(data.currentRankSince) : null,
      enrollmentDate: data.enrollmentDate ? new Date(data.enrollmentDate) : null,
      birthDate: data.birthDate ? new Date(data.birthDate) : null,
      retirementDate: data.retirementDate ? new Date(data.retirementDate) : null,
      
      createdBy: (session.user as any)?.id,
    };

    console.log('üíæ Processed data to save:', JSON.stringify(processedData, null, 2));

    const personnel = await prisma.policePersonnel.create({
      data: processedData,
    });

    console.log('‚úÖ Saved personnel:', JSON.stringify(personnel, null, 2));

    return NextResponse.json(personnel, { status: 201 });
  } catch (error) {
    console.error('Error creating personnel:', error);
    return NextResponse.json(
      { error: 'Failed to create personnel' },
      { status: 500 }
    );
  }
}
